  *LigonLab*: Toolbox for working with/like Ethan Ligon

* Introduction
  :PROPERTIES:
  :EXPORT_FILE_NAME: README
  :EXPORT_TITLE: LigonLab: Toolbox for working with/like Ethan Ligon
  :END:
This project is meant to both document and help set up a software
environment which will allow you to use tools employed by Ethan Ligon
(that's me) and various of his students and colleagues.  If you want
to be able to work with me you may find this toolbox useful.  However,
you don't have to have a relationship with me to use this
package---you may find it independently useful, or useful as a first
step in replicating work done by others who have used this package.

*Nota Bene*: I think any of the code/setup in this toolbox should work on a wide
variety of computers running =linux= or =macOS=.  If you're on a MS
Windows machine you're not definitely not working with/like Ethan
Ligon, and much of what follows may need to be changed or adapted if
it's to work at all.

** Getting Started
   Fork this repository on =github=, and then follow instructions in
   =LigonLab.org:Basic Setup= to install =git=, =emacs=, and
   =Anaconda=, if these aren't already installed.
   
* Basic Setup
** Git

 This toolbox comes most naturally in the form of a =git= repository,
 available on-line at https://github.com/ligon/LigonLab/.  If you don't
 already have a =git= client installed on your machine, please follow
 the instructions at
 https://git-scm.com/book/en/v2/Getting-Started-Installing-Git. 

 I'll assume going forward that you've:
   1. Installed =git=; 
   2. Are capable of opening and functioning in a terminal;
   3. Have a =github= account; supply your user name (replace "ligon") below
      #+name: githubuser
      | Your github user id: | ligon |
   4. And have "forked" LigonLab on github.

 Note that you *could* clone LigonLab directly from the =url= above, but our
 collective workflow instead is modeled on you working with a "fork".
 See the discussion at https://help.github.com/articles/fork-a-repo/
 if this idea is unfamiliar.
 
 With these prerequisites satisfied, at the command line you can check out the git
 repository for LigonLab by executing:

 #+begin_src sh :export code :var GITHUBUSER=githubuser[0,1]
 cd $HOME
 git clone https://github.com/$GITHUBUSER/LigonLab.git
 cd LigonLab
 git remote add upstream git://github.com/ligon/LigonLab.git
 #+end_src

 This should install the repository (containing this file!) from your
 forked version of LigonLab under your home directory.  Your forked
 version on =github= will be referred to as =origin=.  The final
 command above also adds the original =ligon/LigonLab= repo, referred
 to as =upstream=. 

*** TODO Basic Git Use

How to fork a file from LigonLab to your personal github fork:
   1. Open LigonLab from your profile
   2. Click on Enable Compare on the right of the window
   3. Click on "switching the base"
   4. Click on "Create Pull Request"
   5. Send yourself a message and send
   6. Merge the pull request.
   7. On your terminal, check git status, check git diff, git pull

** Emacs
*** Installation
  This document is written in =org-mode= format, a plaintext markup
  language designed to work well with =emacs=.  If you don't have
  =emacs= installed on your machine, you'll need it!  Some possible
  sources (definitely not comprehensive):

  - =Ubuntu/Linux= :: Execute from a shell:
    #+begin_src bash :exports code
    sudo apt update 
    sudo apt install emacs
    #+end_src

  - =macOS= :: Download and run the installer from
               https://emacsformacosx.com/.
               Note that =macOS= also comes with a version of =emacs=
               installed that can (only?) be run in a terminal.  This
               latter is probably not what you want.
*** Setup
    Here we'll consider how to configure the extraordinarily
    configurable =emacs=.  By default =emacs= will look for
    configuration information in a directory called =.emacs.d=,
    located under your home directory.  The following effectively 
    creates this directory for you.
    #+begin_src sh :exports code
    ln -s ./starter-kit/ $HOME/.emacs.d
    touch ./starter-kit/custom.el
    echo "***Now exit emacs and restart***"
    #+end_src

    #+RESULTS:
    : ***Now exit emacs and restart***

** Python
   Different problems call for different tools, but =python= is my
   go-to programming language for a wide variety of projects.  Much of
   my code leans heavily on packages designed for various numerical
   applications.  Many of these, in turn, are included in the
   easily-installed =Anaconda=, which can be obtained from
   https://www.anaconda.com/download/.  I recommend =Anaconda= because
   it greatly simplifies package management for =python= (which often
   relies on many different packages, with different dependencies).

   Toward the end of the =Anaconda= installation process, the
   installation script may ask you if you want the =Ananconda=
   directory added to your search path.  Say "Yes"!

* Getting Started
  You've got the various bits of software described above installed.
  Time to use them!
** Basic =emacs= navigation
   From within =emacs=, try either typing "C-h t" to start a basic
   =emacs= tutorial.

** Packages for =emacs=
   The word "emacs" is a sort of acronym, and the "e" stands for
   "extensible."  One way in which it's easy to extend =emacs= is via
   various kinds of configuration; another is to add various packages.  

*** Emacs configuration
    This section will help you to create a configuration file to tweak
    and extend emacs.  We'll take it step by step.


*** Emacs packages
**** Managing packages with =el-get=
     The following code installs (if necessary) and initializes a
     package called =el-get= that... manages other packages.  

         #+begin_src emacs-lisp :tangle ~/.emacs.d/ligonlab.el
           (add-to-list 'load-path "~/.emacs.d/el-get/el-get")
              (unless (require 'el-get nil 'noerror)
                (with-current-buffer
                    (url-retrieve-synchronously
                     "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
                  (goto-char (point-max))
                  (eval-print-last-sexp)))

              (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
              (el-get 'sync)
        #+end_src   

        #+results:

**** Adding =scimax=
     The following installs an emacs package =scimax=:
     #+begin_src sh
     cd src
     bash -c "$(curl -fsSL https://raw.githubusercontent.com/jkitchin/scimax/master/install-scimax-linux.sh)"
     #+end_src

     The next accomplishes some emacs setup of =scimax=.
     #+begin_src emacs-lisp :tangle ~/.emacs.d/ligonlab.el
     (setq scimax-dir (expand-file-name "~/.emacs.d/src/scimax"))
     (add-to-list 'load-path (expand-file-name "~/.emacs.d/src/scimax"))
     #+end_src
     
** Hello world!
   Our goal here is simply to run a simple "Hello world!" program, but
   to do it from =emacs/orgmode=.  And since we're in the East Bay
   we'll modify it appropriately.
 
   Before we start, we need to tell =emacs= it's okay to execute
   various kinds of programs.  Here put a "t" as the argument for any
   language you think you might want to execute.  Both =emacs-lisp=
   and =python= should remain set, and also =shell= for good measure.
   The others are optional.

   Go ahead and execute this code block by putting your cursor inside
   the block and pressing "C-c C-c".[fn:: Some versions of =emacs= may
   require you to change =sh= to =shell= in the code block below.]

   #+begin_src emacs-lisp :tangle yes                                  
   (org-babel-do-load-languages                                        
    (quote org-babel-load-languages)                                   
    (quote ((emacs-lisp . t)                                           
            (python . t)                                               
            (shell . t) ; If an error, trying commenting this line...  
            ;(sh . t)   ; ...and uncommenting this one.                
            (org . t)                                                  
            (dot . nil)                                                
            (ditaa . nil)                                              
            (R . nil)                                                  
            (ipython . nil)                                            
            (octave . nil)                                             
            (gnuplot . nil)                                            
            (ledger . nil)                                             
            (asymptote . nil)                                          
            (latex . nil))))
   #+end_src                                                           

   #+RESULTS:

   You'll probably want to execute the following, but consider that
   this may create a security issue.
   #+begin_src emacs-lisp :tangle yes
   ; Do not prompt to confirm evaluation
   ; This may be dangerous - make sure you understand the consequences
   ; of setting this -- see the docstring for details
   (setq org-confirm-babel-evaluate nil)
   #+end_src

   #+RESULTS:

   Now, with that language setup out of the way, do the same "C-c C-c"
   trick on the =hello= code block immediately below.

   #+name: hello  
   #+begin_src python :results output  
print("Hell%c world!" % 'a')
   #+end_src

   #+results: hello
   : Hella world!

   Success should look like a line reading "#+RESULTS: hello" and a greeting.

** Importing =python= modules from Anaconda
   If you've installed =anaconda= as directed above, then on your
   computer you'll have available several related things, including

    - A =python= interpreter.  Test by executing (C-c C-c) the
      following code block---You should receive a greeting in
      response, preceded by an indication of what python binary is
      being called.  NB: *This path should include the string "anaconda"!*
      #+begin_src sh :results output
      echo "python called from `which python`."
      python -c"print('Hella world!')"
      #+end_src

    - An interactive python shell called =ipython=.  Invoke this from
      the command line for a convenient way to use python.

    - A collection of packages and modules useful for research
      computing.  A leading example is the =pandas= package.  Execute
      the following to make sure this works:
      #+begin_src python :results output
      import pandas as pd
      print(pd.__file__)      
      #+end_src

      #+results:

      *Once again this path should include the string "anaconda".*

