#+PROPERTY: header-args:emacs-lisp :tangle yes

* Start with initial frame maximized
#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'initial-frame-alist '(fullscreen . fullwidth))
#+END_SRC

#+RESULTS:
: ((fullscreen . fullwidth) (fullscreen . maximized))

* Other starter kit bits to load for basic LigonLab use
  Here indicate starter-kits to load by default.
  #+begin_src emacs-lisp :tangle yes
  (starter-kit-load "python") ;; Breaks w/emacs24?; see http://python.6.n6.nabble.com/problem-with-byte-code-td2012559.html for possible work-around
  (starter-kit-load "org")
  #+end_src

* ELPA Package Archives
 #+BEGIN_SRC emacs-lisp :tangle yes :results silent
 (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
 (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)
 ;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
 (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t) ; Org-mode's
 (add-to-list 'package-archives '("nongnu" . "http://elpa.nongnu.org/nongnu/") t)
 #+END_SRC

* Magit-status global key
#+BEGIN_SRC emacs-lisp
(use-package magit)
(global-set-key (kbd "C-x g") 'magit-status)
(use-package magithub
  :after magit
  :config
  (magithub-feature-autoinject t))
  ;(setq magithub-clone-default-directory "~/github"))t
#+END_SRC

Here's the setup for forge, an alternative to magithub.
#+begin_src emacs-lisp
(use-package forge
  :after magit)
#+end_src

#+results:

* Fix for problem with exec-path on MacOS
  Emacs on MacOS has an issue in setting the path it searches for
  executables correctly.  Here's an emacs module that purports to
  solve that problem.
#+BEGIN_SRC emacs-lisp :tangle yes
(when (memq window-system '(mac ns x))
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize)))
#+END_SRC

#+RESULTS:

* Some =org-mode= additions
** Use inline tasks
#+begin_src emacs-lisp
(require 'org-inlinetask)
#+end_src
** Setup org-drawers
#+begin_src emacs-lisp
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK" "SETUP")))
#+end_src


** Use org-tempo instead of easy templates
   #+begin_src emacs-lisp
   (require 'org-tempo)
   (setq org-tempo-keywords-alist 
          (quote (("L" . "latex")
                 ("H" . "html")
                 ("A" . "ascii"))))

   (add-to-list 'org-structure-template-alist '("p" . "src python
"))
   (add-to-list 'org-structure-template-alist '("i" . "src ipython
"))
   #+end_src

   #+RESULTS:
   : ((i . src ipython
   : ) (p . src python
   : ) (a . export ascii) (c . center) (C . comment) (e . example) (E . export) (h . export html) (l . export latex) (q . quote) (s . src) (v . verse))



   #+end_src

* Define "unfill-paragraph"
  See https://www.emacswiki.org/emacs/UnfillParagraph
  #+begin_src emacs-lisp
  (defun unfill-paragraph (&optional region)
      "Takes a multi-line paragraph and makes it into a single line of text."
      (interactive (progn (barf-if-buffer-read-only) '(t)))
      (let ((fill-column (point-max))
            ;; This would override `fill-column' if it's an integer.
            (emacs-lisp-docstring-fill-column t))
        (fill-paragraph nil region)))

  (define-key global-map "\M-Q" 'unfill-paragraph)
  #+end_src
