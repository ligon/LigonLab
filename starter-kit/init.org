#+PROPERTY: header-args:emacs-lisp :tangle init.el
* Initial startup

First, a hook that reports how long and how many garbage collections the startup took.

#+begin_src emacs-lisp 
  ;; Use a hook so the message doesn't get clobbered by other messages.
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+end_src

Next, we wrap the whole init file in a block that sets
=file-name-handler-alist= to =nil= to prevent any special-filename
parsing of files loaded from the init file (e.g. remote files loaded
through tramp, etc.). The =let= block gets closed in the [[Epilogue][Epilogue]].

#+begin_src emacs-lisp
  (let ((file-name-handler-alist nil))  ; this is open, and closed only in epilogue
#+end_src

We set =gc-cons-threshold= to its maximum value, to prevent any
garbage collection from happening during load time. We also reset this
value in the [[Epilogue][Epilogue]].

#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

Set the following for =straight.el= to prevent conflicts with
=package.el=.

#+begin_src emacs-lisp
  ; (setq package-enable-at-startup nil)  # See https://github.com/radian-software/straight.el#features
#+end_src

* Customized variables

Emacs has its own [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html#Easy-Customization][Customization mechanism]] for easily customizing many parameters. To make it easier to manage, I keep the customized variables and faces in a separate file and load it from the main file. A lot of my custom settings are configured from this init file as well, but there are always some which I change by hand for added flexibility.

#+begin_src emacs-lisp
  (let ((custom-file "~/.emacs.d/custom.el"))
    (when (file-exists-p custom-file)
      (load-file custom-file))
  ) 
#+end_src

Here is the current contents of my [[https://github.com/zzamboni/dot-emacs/blob/master/custom.el][custom.el]] file.

#+include: "~/.emacs.d/custom.el" src emacs-lisp


* Straight package management

Bootstrap =straight.el=...
#+begin_src emacs-lisp 
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** Use-package
Finally, we load =use-package=.

#+begin_src emacs-lisp 
  (require 'use-package)
#+end_src

The =use-package-verbose= variable enables verbose loading of
packages, useful for debugging. I set/unset this according to need.

#+begin_src emacs-lisp 
  (customize-set-variable 'use-package-verbose t)
#+end_src

The =use-package-always-defer= sets =:defer true= as the default for
all package declarations. This makes Emacs startup much faster by
preventing packages from being loaded when Emacs starts, and only
doing so when they are needed. Some packages don't work well with
this, so you'll see some declarations when I explicitly set =:defer
nil= to force the package to be loaded at startup, or =:defer n= to
load the package, but only =n= seconds after startup.

#+begin_src emacs-lisp
  (customize-set-variable 'use-package-always-defer t)
#+end_src


* Other compilation/installation issues

This variable tells Emacs to prefer the =.el= file if it's newer, even
if there is a corresponding =.elc= file. Also, use =auto-compile= to
autocompile files as needed.

#+begin_src emacs-lisp 
  (customize-set-variable 'load-prefer-newer t)
  (use-package auto-compile
    :defer nil
    :config (auto-compile-on-load-mode))
#+end_src

Set the load path to the directories from where I sometimes load
things outside the package system. 

#+begin_src emacs-lisp 
  (add-to-list 'load-path "~/.emacs.d/src")
#+end_src

* Org-mode setup
#+begin_src emacs-lisp :noweb yes 
(use-package org
	     :demand t
	     :load-path "~/.emacs.d/straight/build/org/"
  	     :mode ("\\*.org$" . org-mode))
#+end_src

* Starter-kit init
#+begin_src emacs-lisp 
(setq starter-kit-dir (expand-file-name "~/.emacs.d/"))
(org-babel-load-file (expand-file-name "starter-kit.org" starter-kit-dir))
#+end_src


* Epilogue

Here we close the =let= expression from [[*Performance optimization][the preface]].

#+begin_src emacs-lisp 
  )
#+end_src

We also reset the value of =gc-cons-threshold=, not to its original value, we still leave it larger than default so that GCs don't happen so often.

#+begin_src emacs-lisp 
    (setq gc-cons-threshold (* 2 1000 1000))
#+end_src

